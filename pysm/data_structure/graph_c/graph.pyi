#!/usr/bin/python
# -*- coding: utf-8 -*-
from pathlib import Path
from typing import Generic, TypeVar, Iterable, Iterator, Union

from data_structure.graph_enum import GraphNodeType, GraphLinkType


class GraphNode(object):
    id: int
    type: GraphNodeType
    label: bytes
    n_incoming_links: int
    n_outgoing_links: int
    _graph: Graph

    def __init__(self, *args, **kwargs) -> None: ...

    def is_data_node(self) -> bool: ...

    def is_class_node(self) -> bool: ...

    def equal(self, another: GraphNode) -> bool: ...

    def get_first_incoming_link(self) -> GraphLink: ...

    def iter_incoming_links(self) -> Iterable[GraphLink]: ...

    def iter_outgoing_links(self) -> Iterable[GraphLink]: ...

    def get_printed_label(self, max_text_width: int) -> str: ...

    def get_dot_format(self, max_text_width: int) -> str: ...


class GraphLink(object):

    id: int
    type: GraphLinkType
    label: bytes = None
    source_id: int
    target_id: int
    _graph: Graph

    def __init__(self, *args, **kwargs) -> None: ...

    def equal(self, another: GraphLink) -> bool: ...

    def get_source_node(self) -> GraphNode: ...

    def get_target_node(self) -> GraphNode: ...

    def get_printed_label(self, max_text_width: int) -> str: ...

    def get_dot_format(self, max_text_width: int) -> str: ...


V = TypeVar('V', covariant=True, bound=GraphNode)
E = TypeVar('E', covariant=True, bound=GraphLink)


class Graph(Generic[V, E]):
    
    name: bytes
    index_node_type: bool
    index_node_label: bool
    index_link_label: bool

    def __init__(self,
                 index_node_type: bool=False,
                 index_node_label: bool=False,
                 index_link_label: bool=False,
                 estimated_n_nodes: int=24,
                 estimated_n_links: int=23,
                 name: bytes=b"graph",
                 *args,
                 **kwargs) -> None: ...

    def set_name(self, name: bytes) -> None: ...

    def get_n_nodes(self) -> int: ...

    def get_n_links(self) -> int: ...

    def clone(self, estimated_n_nodes: int=-1, estimated_n_links: int=-1) -> Graph[V, E]: ...

    def real_add_new_node(self, node: V, type: GraphNodeType, label: bytes) -> V: ...

    def real_add_new_link(self, link: E, type: GraphLinkType, label: bytes, source_id: int, target_id: int) -> E: ...

    def add_new_node(self, type: GraphNodeType, label: bytes) -> V: ...

    def add_new_link(self, type: GraphLinkType, label: bytes, source_id: int, target_id: int) -> E: ...

    def has_node_with_id(self, id: int) -> bool: ...

    def has_link_with_id(self, id: int) -> bool: ...

    def get_node_by_id(self, id: int) -> V: ...

    def get_link_by_id(self, id: int) -> E: ...

    def iter_nodes(self) -> Iterable[V]: ...

    def iter_links(self) -> Iterable[E]: ...

    def iter_class_nodes(self) -> Iterator[V]: ...

    def iter_data_nodes(self) -> Iterator[V]: ...

    def iter_nodes_by_label(self, lbl: bytes) -> Iterator[V]: ...

    def iter_links_by_label(self, lbl: bytes) -> Iterator[E]: ...

    def equal(self, another: Graph) -> bool: ...

    def to_dict(self) -> dict: ...

    @staticmethod
    def from_dict(obj: dict) -> Graph: ...

    def render(self, dpi: int, max_text_width: int=15) -> None: ...

    def render2img(self, foutput: Union[str, Path], max_text_width: int=15) -> None: ...

    def render2pdf(self, foutput: Union[str, Path], max_text_width: int=15) -> None: ...
